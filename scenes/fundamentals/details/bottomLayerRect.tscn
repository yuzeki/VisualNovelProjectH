[gd_scene load_steps=5 format=2]

[ext_resource path="res://scenes/fundamentals/details/bottomLayerRect.gd" type="Script" id=2]

[sub_resource type="Shader" id=2]
code = "shader_type canvas_item;

uniform float size = 10.0;

void fragment( )
{
	vec2 p = floor( FRAGCOORD.xy / size ) * size;
	vec2 quat_x = vec2( size / 4.0, 0 );
	vec2 quat_y = vec2( 0, quat_x.x );
	COLOR = vec4( (
		texelFetch( SCREEN_TEXTURE, ivec2( p ), 0 ).xyz
	+	texelFetch( SCREEN_TEXTURE, ivec2( p + quat_x ), 0 ).xyz
	+	texelFetch( SCREEN_TEXTURE, ivec2( p + quat_x * 2.0 ), 0 ).xyz
	+	texelFetch( SCREEN_TEXTURE, ivec2( p + quat_x * 3.0 ), 0 ).xyz
	+	texelFetch( SCREEN_TEXTURE, ivec2( p + quat_y ), 0 ).xyz
	+	texelFetch( SCREEN_TEXTURE, ivec2( p + quat_y + quat_x ), 0 ).xyz
	+	texelFetch( SCREEN_TEXTURE, ivec2( p + quat_y + quat_x * 2.0 ), 0 ).xyz
	+	texelFetch( SCREEN_TEXTURE, ivec2( p + quat_y + quat_x * 3.0 ), 0 ).xyz
	+	texelFetch( SCREEN_TEXTURE, ivec2( p + quat_y * 2.0 ), 0 ).xyz
	+	texelFetch( SCREEN_TEXTURE, ivec2( p + quat_y * 2.0 + quat_x ), 0 ).xyz
	+	texelFetch( SCREEN_TEXTURE, ivec2( p + quat_y * 2.0 + quat_x * 2.0 ), 0 ).xyz
	+	texelFetch( SCREEN_TEXTURE, ivec2( p + quat_y * 2.0 + quat_x * 3.0 ), 0 ).xyz
	+	texelFetch( SCREEN_TEXTURE, ivec2( p + quat_y * 3.0 ), 0 ).xyz
	+	texelFetch( SCREEN_TEXTURE, ivec2( p + quat_y * 3.0 + quat_x ), 0 ).xyz
	+	texelFetch( SCREEN_TEXTURE, ivec2( p + quat_y * 3.0 + quat_x * 2.0 ), 0 ).xyz
	+	texelFetch( SCREEN_TEXTURE, ivec2( p + quat_y * 3.0 + quat_x * 3.0 ), 0 ).xyz
	) / 16.0, 1.0 );
}
"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )
shader_param/size = 10.0

[sub_resource type="Animation" id=1]
resource_name = "pixel"
tracks/0/type = "value"
tracks/0/path = NodePath(".:material:shader_param/size")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 1.0, 30.0 ]
}

[node name="bottomLayerRect" type="ColorRect"]
material = SubResource( 3 )
anchor_right = 1.0
anchor_bottom = 1.0
color = Color( 0, 0, 0, 0 )
script = ExtResource( 2 )
__meta__ = {
"_edit_use_anchors_": false,
"_editor_description_": "Loads a shader, and does special effects. "
}

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
anims/pixel = SubResource( 1 )

[connection signal="animation_finished" from="AnimationPlayer" to="." method="_on_AnimationPlayer_animation_finished"]
